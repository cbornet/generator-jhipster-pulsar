package <%= packageName %>.web.rest;

import <%= packageName %>.config.PulsarProperties;
import org.apache.pulsar.client.api.*;
import org.apache.pulsar.client.impl.ConnectionPool;
import org.apache.pulsar.client.impl.MultiTopicsConsumerImpl;
import org.apache.pulsar.client.impl.conf.ConsumerConfigurationData;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.ReflectionUtils;
import org.testcontainers.containers.PulsarContainer;

import java.lang.reflect.Field;
import java.time.Duration;
import java.time.Instant;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

class PulsarResourceTest {

    private static PulsarContainer pulsarContainer;

    private MockMvc restMockMvc;
    private PulsarClient client;
    private PulsarResource pulsarResource;

    @BeforeAll
    static void startServer() {
        pulsarContainer = new PulsarContainer("2.4.1");
        pulsarContainer.start();
    }

    @BeforeEach
    void setup() throws Exception {
        PulsarProperties pulsarProperties = new PulsarProperties();
        Map<String, String> clientProps = new HashMap<>();
        clientProps.put("serviceUrl", pulsarContainer.getPulsarBrokerUrl());
        pulsarProperties.setClient(clientProps);

        Map<String, String> consumerProps = new HashMap<>();
        consumerProps.put("consumerName", "default-consumer");
        pulsarProperties.setConsumer(consumerProps);

        pulsarResource = new PulsarResource(pulsarProperties);

        this.client = PulsarClient.builder()
            .serviceUrl(pulsarContainer.getPulsarBrokerUrl())
            .build();

        restMockMvc = MockMvcBuilders.standaloneSetup(pulsarResource)
            .build();
    }

    @Test
    void producesMessages() throws Exception {
        Consumer<String> consumer = client.newConsumer(Schema.STRING)
            .topic("topic-produce")
            .subscriptionName("subscription-produce")
            .subscribe();

        restMockMvc.perform(post("/api/pulsar/publish/topic-produce?message=value-produce"))
            .andExpect(status().isOk());

        Message<String> message = consumer.receive(5, TimeUnit.SECONDS);

        assertThat(message.getValue()).isEqualTo("value-produce");
        consumer.close();
    }

    @Test
    void createSubscription() throws Exception {
        restMockMvc.perform(put("/api/pulsar/subscriptions/subscription-create?topic=topic-create&topic=topic-create2&consumerName=consumer-create&subscriptionType=Shared"))
            .andExpect(status().isOk());

        Field consumersField = ReflectionUtils.findField(PulsarResource.class, "consumers");
        ReflectionUtils.makeAccessible(consumersField);
        Map<String, Consumer<String>> consumers = (Map<String, Consumer<String>>)consumersField.get(pulsarResource);
        assertThat(consumers).containsKey("subscription-create");
        Consumer<String> consumer = consumers.get("subscription-create");
        assertThat(consumer).isInstanceOf(MultiTopicsConsumerImpl.class);
        MultiTopicsConsumerImpl<String> multiTopicsConsumer = (MultiTopicsConsumerImpl<String>) consumer;
        assertThat(multiTopicsConsumer.getTopics()).containsExactlyInAnyOrder("topic-create", "topic-create2");
        assertThat(multiTopicsConsumer.getSubscription()).isEqualTo("subscription-create");
        assertThat(multiTopicsConsumer.getConsumerName()).isEqualTo("consumer-create");
        Field configField = ReflectionUtils.findField(MultiTopicsConsumerImpl.class, "internalConfig");
        ReflectionUtils.makeAccessible(configField);
        ConsumerConfigurationData<String> configurationData = (ConsumerConfigurationData<String>) configField.get(multiTopicsConsumer);
        assertThat(configurationData.getSubscriptionType()).isEqualTo(SubscriptionType.Shared);
    }

    @Test
    void consumesSubscriptionWithMessage() throws Exception {
        Consumer<String> consumer = client.newConsumer(Schema.STRING)
            .subscriptionName("subscription-consume")
            .topic("topic-consume")
            .subscribe();
        Map<String, Consumer<String>> consumers = new HashMap<>();
        consumers.put("subscription-consume", consumer);
        Field consumersField = ReflectionUtils.findField(PulsarResource.class, "consumers");
        ReflectionUtils.makeAccessible(consumersField);
        ReflectionUtils.setField(consumersField, pulsarResource, consumers);

        Producer<String> producer = client.newProducer(Schema.STRING)
            .topic("topic-consume")
            .create();
        producer.send("value-consume");

        long before = Instant.now().toEpochMilli();

        restMockMvc.perform(get("/api/pulsar/subscriptions/subscription-consume/records?durationMs=5000"))
            .andExpect(status().isOk())
            .andExpect(content().string("[\"value-consume\"]"));

        assertThat(Instant.now().toEpochMilli() - before).isLessThan(100L);

        producer.close();
        consumer.close();
    }

    @Test
    void consumesSubscriptionNoMessage() throws Exception {
        Consumer<String> consumer = client.newConsumer(Schema.STRING)
            .subscriptionName("subscription-consume")
            .topic("topic-consume")
            .subscribe();
        Map<String, Consumer<String>> consumers = new HashMap<>();
        consumers.put("subscription-consume", consumer);
        Field consumersField = ReflectionUtils.findField(PulsarResource.class, "consumers");
        ReflectionUtils.makeAccessible(consumersField);
        ReflectionUtils.setField(consumersField, pulsarResource, consumers);

        long before = Instant.now().toEpochMilli();

        restMockMvc.perform(get("/api/pulsar/subscriptions/subscription-consume/records?durationMs=100"))
            .andExpect(status().isOk())
            .andExpect(content().string("[]"));

        assertThat(Instant.now().toEpochMilli() - before).isGreaterThan(100L);
        consumer.close();
    }
}
