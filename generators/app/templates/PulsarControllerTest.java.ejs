package <%= packageName %>.web.rest;

import <%= packageName %>.config.PulsarProperties;
import org.apache.pulsar.client.api.*;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.testcontainers.containers.PulsarContainer;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.fail;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

class PulsarControllerTest {

    private static PulsarContainer pulsarContainer;

    private MockMvc restMockMvc;
    private PulsarClient client;

    @BeforeAll
    static void startServer() {
        pulsarContainer = new PulsarContainer("2.4.2");
        pulsarContainer.start();
    }

    @BeforeEach
    void setup() throws Exception {
        PulsarProperties pulsarProperties = new PulsarProperties();
        Map<String, String> clientProps = new HashMap<>();
        clientProps.put("serviceUrl", pulsarContainer.getPulsarBrokerUrl());
        pulsarProperties.setClient(clientProps);

        Map<String, String> consumerProps = new HashMap<>();
        consumerProps.put("consumerName", "default-consumer");
        pulsarProperties.setConsumer(consumerProps);

        PulsarController pulsarController = new PulsarController(pulsarProperties);

        this.client = PulsarClient.builder()
            .serviceUrl(pulsarContainer.getPulsarBrokerUrl())
            .build();

        restMockMvc = MockMvcBuilders.standaloneSetup(pulsarController)
            .build();
    }

    @Test
    void producesMessages() throws Exception {
        Consumer<String> consumer = client.newConsumer(Schema.STRING)
            .topic("topic-produce")
            .subscriptionName("subscription-produce")
            .subscribe();

        restMockMvc.perform(post("/api/pulsar/publish/topic-produce?message=value-produce"))
            .andExpect(status().isOk());

        Message<String> message = consumer.receive(5, TimeUnit.SECONDS);

        assertThat(message.getValue()).isEqualTo("value-produce");
        consumer.close();
    }

    @Test
    void consumesMessages() throws Exception {
        Producer<String> producer = client.newProducer(Schema.STRING)
            .topic("topic-consume")
            .create();
        producer.send("value-consume");

        MvcResult mvcResult = restMockMvc
            .perform(get("/api/pulsar/consume/subscr?topic=topic-consume&subscriptionInitialPosition=Earliest"))
            .andExpect(status().isOk())
            .andExpect(content().contentTypeCompatibleWith(MediaType.TEXT_EVENT_STREAM))
            .andExpect(request().asyncStarted())
            .andReturn();

        for (int i = 0; i < 100; i++) {
            Thread.sleep(100);
            String content = mvcResult.getResponse().getContentAsString();
            if (content.contains("data:value-consume")) {
                return;
            }
        }
        fail("Expected content data:value-consume not received");
    }
}
