package <%= packageName %>.web.rest;

import <%= packageName %>.config.PulsarProperties;
import org.apache.pulsar.client.api.*;
import org.bouncycastle.util.encoders.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

@RestController
@RequestMapping("/api/pulsar")
public class PulsarController {

    private final Logger log = LoggerFactory.getLogger(PulsarController.class);

    private final PulsarProperties pulsarProperties;
    private PulsarClient client;
    private ExecutorService sseExecutorService = Executors.newCachedThreadPool();

    PulsarController(PulsarProperties pulsarProperties) throws PulsarClientException {
        this.pulsarProperties = pulsarProperties;
        this.client = PulsarClient.builder()
            .loadConf(pulsarProperties.getClientProps())
            .build();
    }

    /**
     * {@code POST  /publish/:topic} : send a message to a Pulsar topic
     *
     * @param topic Pulsar topic to send the message to
     * @param message the string message to send
     * @param key optional partition key
     * @return the message id encoded in base64
     * @throws PulsarClientException if the client failed to communicate with the broker
     */
    @PostMapping("/publish/{topic}")
    public String sendMessageToPulsarTopic(@PathVariable String topic,
                                           @RequestParam("message") String message,
                                           @RequestParam(value = "key", required = false) String key) throws PulsarClientException {
        log.debug("REST request to send to Pulsar topic {} with key {} the message : {}", topic, key, message);
        Producer<String> producer = client.newProducer(Schema.STRING)
            .loadConf(pulsarProperties.getProducerProps())
            .topic(topic)
            .create();

        TypedMessageBuilder<String> msg = producer.newMessage().value(message);
        if (key != null) {
            msg.key(key);
        }
        MessageId messageId = msg.send();
        producer.close();
        return Base64.toBase64String(messageId.toByteArray());
    }

    /**
     * {@code PUT  /consume/:subscriptionName} : create a consumer and get the messages as an SSE stream
     *
     * @param subscriptionName name of the subscription
     * @param topics list of topics to subscribe to
     * @param consumerParams query params. By default, the properties from application.yml are used to configure the consumer.
     *                       Query params can be passed to the endpoint to override the default configuration
     *                       (eg. /consume/my-sub?subscriptionType=Shared)
     * @return an SSE stream of the Pulsar message values
     */
    @GetMapping("/consume/{subscriptionName}")
    public SseEmitter consume(@PathVariable String subscriptionName,
                              @RequestParam("topic") List<String> topics,
                              @RequestParam Map<String, String> consumerParams) {
        log.debug("REST request to consume records from Pulsar topics {}", topics);
        Map<String, Object> consumerProps = pulsarProperties.getConsumerProps();
        consumerProps.putAll(consumerParams);
        consumerProps.remove("topic");

        SseEmitter emitter = new SseEmitter(0L);
        sseExecutorService.execute(() -> {
            try {
                Consumer<String> consumer = client.newConsumer(Schema.STRING)
                    .loadConf(consumerProps)
                    .subscriptionName(subscriptionName)
                    .topics(topics)
                    .subscribe();
                emitter.onCompletion(() -> {
                    try {
                        consumer.close();
                    } catch (PulsarClientException e) {
                        log.error("Couldn't close consumer", e);
                    }
                });
                boolean exitLoop = false;
                while (!exitLoop) {
                    try {
                        Message<String> message = consumer.receive(5, TimeUnit.SECONDS);
                        if (message == null) {
                            emitter.send(SseEmitter.event().comment(""));
                        } else {
                            emitter.send(message.getValue());
                        }
                    } catch (Exception ex) {
                        log.trace("Complete with error {}", ex.getMessage(), ex);
                        emitter.completeWithError(ex);
                        exitLoop = true;
                    }
                }
                consumer.close();
            } catch (PulsarClientException e) {
                log.error("Communication with Pulsar failed", e);
            } finally {
                emitter.complete();
            }
        });
        return emitter;
    }

}
